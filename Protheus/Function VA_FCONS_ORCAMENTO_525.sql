SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Descricao: Retorna tabela para consulta de orcado X realizado no NaWeb. Implementado em forma de funcao por que,
--            com query simples usando CTE, ficava muito pesado para fazer os NIVELs.
-- Autor....: Robert Koch
-- Data.....: 02/12/2019
--
-- Historico de alteracoes:
-- 29/01/2020 - Robert - Novos grupos de contas e subtotais, com base na visao gerencial 525.
-- 14/02/2020 - Robert - Coluna indicando o nivel, totaliza niveis, filtra acessos do usuario.
--                     - Quando tinha apenas valor orcado para o ano (zero nas demais colunas), desconsiderava o registro.
-- 20/02/2020 - Robert - Acrescentado perfil 143 (auditoria) para nao filtrar CC/conta
--                     - Filtro de CC/conta passa a usar LIKE e aceitar '%' nas tabelas do NaWeb.
--                     - Cria grupo de EBITDA para evidenciar o calculo.
-- 02/03/2020 - Robert - Calculo do EBITDA estava diminuindo a depreciacao em vez de somar.
-- 03/03/2020 - Robert - Implementada filtragem de acessos por grupo/ordem (conforme vier do NaWeb)
-- 04/03/2020 - Robert - Acrescentado perfil 154 (CONSAD) ao grupo dos ricos, bonitos e famosos.
-- 20/11/2020 - Robert - Acrescentado perfil 128 (ger.admin) ao grupo dos ricos, bonitos e famosos, pois o Alexandre assume a funcao da Rita e precisa dar manutencao nos orcamentos.
-- 25/11/2020 - Robert - Acrescentado perfil 8 (administrador) ao grupo dos ricos, bonitos e famosos.
-- 30/11/2020 - Robert - Removidos perfis fixos de ricos, bonitos e famosos. Passa a validar tudo pelos acessos configurados no NaWeb.
-- 06/12/2020 - Robert - Quando mes nao fechado (SB9), busca CPV pelo custo medio das notas emitidas naquele periodo (GLPI 8900)
-- 19/07/2021 - Robert - Teste de mes jah fechado: comparava sempre datas ateh dia 31 (no caso do mes de junho, temos apenas 30 dias).  (GLPI 10497)
--                     - Teste de mes jah fechado: considerava como CPV somente a conta 402010101001. Passa a ser considerada de 402010101001 a 402010101004 (GLPI 10497)
-- 30/08/2021 - Robert - Nao gera mais EBITDA, ajustes inversoes de sinal chumbados, nao faz mais leitura de financiamentos bancarios (GLPI 10849)
-- 19/11/2021 - Robert - Filtra CQ3_LP!='Z' para ignorar contas de zeramento (anos fechados ficavam com o realizado zerado).
--

ALTER FUNCTION VA_FCONS_ORCAMENTO_525
-- PARAMETROS DE CHAMADA
(
	@FILINI   AS VARCHAR(2),
	@FILFIM   AS VARCHAR(2),
	@ANO      AS VARCHAR(4),
	@MESINI   AS VARCHAR(2),
	@MESFIM   AS VARCHAR(2),
	@PERFIL1  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL2  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL3  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL4  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL5  AS SMALLINT   -- Usuario pode estar em mais de um perfil do NaWeb
)

	-- CRIA TABELA TEMPORARIA PARA RETORNO DA FUNCAO
	returns @RET TABLE (CODPLA  VARCHAR (3)
				,ORDEM          INT
                ,DESC_N1        VARCHAR (40) DEFAULT ''
                ,DESC_N2        VARCHAR (60) DEFAULT ''
                ,NIVEL          VARCHAR (1)  DEFAULT 3
                ,CONTA          VARCHAR (20) DEFAULT ''
                ,DESCRICAO      VARCHAR (40) DEFAULT ''
				,CC             VARCHAR (9)  DEFAULT ''
				,FILIAL         VARCHAR (2)  DEFAULT ''
				,ORC_ANO        FLOAT        default 0
				,ORC_ANO_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
				,ORC_ANO_AV     FLOAT        default 0
				,ORC_PER        FLOAT        default 0
				,ORC_PER_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
				,ORC_PER_AV     FLOAT        default 0

                ,REA_MES        FLOAT        default 0
				,REA_MES_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
                ,REA_MES_AV     FLOAT        default 0

                ,REA_PER        FLOAT        default 0
				,REA_PER_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
                ,REA_PER_AV     FLOAT        default 0
				,REA_ANT        FLOAT        default 0
				,REA_ANT_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
				,REA_ANT_AV     FLOAT        default 0
				,PAG_FIN_BANC   VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH PAGTO.FINANCIAMENTOS BANCARIOS (LINHA APENAS INFORMATIVA, NAO DEVE SER COMPUTADA NOS TOTAIS)
				,EH_DEPRECIACAO VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH DEPRECIACAO, PARA POSTERIOR CALCULO DE EBITDA.
				,INFORMATIVO    VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH APENAS INFORMATIVO E NAO DEVE SER SOMADO AOS TOTAIS.
				,DESTACAR       VARCHAR (1)  DEFAULT 'N' -- INDICA SE A LINHA DEVE SER DESTACADA NA CONSULTA (NEGRITO, HACHURADO, ETC.)
				,PERSISTIR      VARCHAR (1)  DEFAULT 'N'  -- INDICA SE, APOS FILTRAGEM DOS ACESSOS DO USUARIO, ESTE REGISTRO DEVE PERSISTIR.
				,FILTRACC       VARCHAR (9)  DEFAULT ''   -- INDICA INICIO DO CODIGO DE CC A SER FILTRADO (PARA CONSULTA DE LCTOS CONTABEIS QUE EH CHAMADA A PARTIR DO NAWEB)
				unique NONCLUSTERED (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, CONTA, FILIAL, CC)
				)

AS
BEGIN

	DECLARE @VISAO_PRINCIPAL VARCHAR (3) = '525';
	DECLARE @VISAO_EBITDA    VARCHAR (3) = '526';
	DECLARE @DATAINI         VARCHAR (8) = @ANO + @MESINI + '01';
	DECLARE @DATAFIM         VARCHAR (8) = @ANO + @MESFIM + '31';
	DECLARE @ANO_ANT         VARCHAR (4) = @ANO - 1;
	DECLARE @DATAINIANT      VARCHAR (8) = @ANO_ANT + SUBSTRING (@DATAINI, 5, 4);
	DECLARE @DATAFIMANT      VARCHAR (8) = @ANO_ANT + SUBSTRING (@DATAFIM, 5, 4);

	-- O CPV SOMENTE APARECE DEPOIS QUE FOR FEITA A CONTABILIZACAO DO CUSTO MEDIO.
	-- POR ISSO, VAMOS PEGAR DO SD2 ENQUANTO O MEDIO ESTIVER ABERTO.
	DECLARE @DTLIMCPV VARCHAR (8) = (SELECT MIN (B9_DATA)
									FROM (SELECT B9_FILIAL, MAX (B9_DATA) AS B9_DATA
											FROM SB9010
											WHERE D_E_L_E_T_ = ''
											AND B9_FILIAL NOT IN ('02','04','05','06','12','14','15')
											GROUP BY B9_FILIAL) ULTIMOS_SB9)

	-- GERA UM CTE DA TABELA CTS CONTENDO OS CAMPOS PRINCIPAIS, JAH FILTRADO PELA VISAO QUE ME INTERESSA.
	;WITH CTS AS (
		SELECT CTS.CTS_CODPLA, CTS.CTS_VAGRP, RTRIM (CTS.CTS_DESCCG) + RTRIM (CTS_DETHCG) + CASE WHEN CTS_VASINF = 'S' THEN ' (informativo)' ELSE '' END AS DESC_N2
				, CTS.CTS_NORMAL, CTS.CTS_CT1INI, CTS.CTS_CT1FIM, CTS.CTS_CTTINI, CTS.CTS_CTTFIM
				, CTS_VAPGFI AS PAGTO_FIN_BANC
				, CTS_VADPR  AS EH_DEPRECIACAO
				, CTS_VASINF AS INFORMATIVO
		  FROM CTS010 CTS
		WHERE CTS.D_E_L_E_T_ = ''
		  AND CTS.CTS_FILIAL = '  '
		  AND CTS.CTS_CODPLA IN (@VISAO_PRINCIPAL, @VISAO_EBITDA)
		  AND CTS.CTS_CLASSE = '2'
	)

	-- GERA UMA CTE AGRUPANDO CONTAS E NIVEIS PARA POSTERIOR VISUALIZACAO
	, NIVEIS AS (SELECT 1  AS ORDEM, '1.(+)INGRESSOS E RECEITAS'       AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 1
	   UNION ALL SELECT 2  AS ORDEM, '2.(-)DEVOLUCOES'                 AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 2
	   UNION ALL SELECT 4  AS ORDEM, '4.(-)IMPOSTOS'                   AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 4
	   UNION ALL SELECT 6  AS ORDEM, '6.(-)CPV'                        AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 6
	   UNION ALL SELECT 8  AS ORDEM, '8.(=)SOBRA OPERACIONAL BRUTA'    AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 8
	   UNION ALL SELECT 9  AS ORDEM, '9.(-)DESPESAS COM PESSOAL'       AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 9
	   UNION ALL SELECT 10 AS ORDEM, '10.(-)DESPESAS ADMINISTRATIVAS'  AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 10
	   UNION ALL SELECT 11 AS ORDEM, '11.(-)DESPESAS TRIBUTARIAS'      AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 11
	   UNION ALL SELECT 12 AS ORDEM, '12.(-)DESPESAS COM VENDAS'       AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 12
	   UNION ALL SELECT 15 AS ORDEM, '15.(+)RESULTADO FINANCEIRO'      AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 15
	   UNION ALL SELECT 16 AS ORDEM, '16.(+)RESULTADO NAO OPERACIONAL' AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 16
	   UNION ALL SELECT 18 AS ORDEM, '18.INFORMATIVOS'                 AS DESC_N1, CTS.* FROM CTS WHERE CTS.CTS_VAGRP = 18
	)

	-- GERA UMA CTE COM 'SALDOS' POR CONTA E CC, PARA POSTERIORMENTE JUNTAR COM OS GRUPOS DA VISAO GERENCIAL.
	, SALDOS AS (
		SELECT  CQ3_FILIAL AS FILIAL,
				CQ3_CONTA AS CONTA,
				'01' + SUBSTRING (CQ3_CCUSTO, 3, 7) AS CC,
--				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @ANO + '0101' AND @ANO + '1231' THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) * CASE WHEN CQ3_CONTA IN ('401010102002', '401010102005') THEN -1 ELSE 1 END AS ORCADO_ANO,
				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @ANO + '0101' AND @ANO + '1231' THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) AS ORCADO_ANO,
--				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @DATAINI      AND @DATAFIM      THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) * CASE WHEN CQ3_CONTA IN ('401010102002', '401010102005') THEN -1 ELSE 1 END AS ORCADO,
				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @DATAINI      AND @DATAFIM      THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) AS ORCADO,

				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN SUBSTRING (@DATAFIM, 1, 6) + '01' AND @DATAFIM  -- SOMENTE DENTRO DO ULTIMO MES
						-- SE FOR CONTA DO CPV, LIMITA-SE A DATA DO ULTIMO FECHAMENTO DO ESTOQUE
						AND (CQ3_CONTA NOT IN ('402010101001','402010101002','402010101004','402010201001','402010201002')  -- TAH, EU SEI QUE NAO DEVIA CHUMBAR AS CONTAS AQUI...
							OR CQ3_DATA <= @DTLIMCPV)
						THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) AS REA_MES,

				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN @DATAINI      AND @DATAFIM
						-- SE FOR CONTA DO CPV, LIMITA-SE A DATA DO ULTIMO FECHAMENTO DO ESTOQUE
						AND (CQ3_CONTA NOT IN ('402010101001','402010101002','402010101004','402010201001','402010201002')  -- TAH, EU SEI QUE NAO DEVIA CHUMBAR AS CONTAS AQUI...
							OR CQ3_DATA <= @DTLIMCPV)
						THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) AS REALIZADO,

				ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN @DATAINIANT   AND @DATAFIMANT   THEN CQ3_DEBITO - CQ3_CREDIT ELSE 0 END), 0) AS REALIZADO_ANOANT
			FROM CQ3010
			WHERE D_E_L_E_T_ = ''
			AND CQ3_DATA BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
			AND CQ3_FILIAL BETWEEN @FILINI AND @FILFIM
			AND (CQ3_CONTA like '4%' or CQ3_CONTA like '7%') AND (CQ3_CONTA < '701011001005' OR CQ3_CONTA > '7010110011039')  -- CONTAS TIPO 'CC' DEVEM SER DESCONSIDERADAS.
			AND CQ3_LP != 'Z' -- IGNORAR AS CONTAS DE ZERAMENTO (VIRADA DE EXERCICIO)
			GROUP BY CQ3_FILIAL, CQ3_CONTA, '01' + SUBSTRING (CQ3_CCUSTO, 3, 7)
	)

	-- GERA CTE COM GRUPOS E SALDOS DAS SUAS CONTAS PARA POSTERIOR GERACAO DE LINHAS CALCULADAS.
	,GRUPOS_COM_SALDOS AS (
	SELECT NIVEIS.CTS_CODPLA AS CODPLA,
		   ISNULL (NIVEIS.ORDEM,   18) AS ORDEM,
		   ISNULL (NIVEIS.DESC_N1, '18.INFORMATIVOS') AS DESC_N1,
		   ISNULL (NIVEIS.DESC_N2, 'SEM CLASSIFICACAO') AS DESC_N2,
		   3 AS NIVEL,
		   SALDOS.CONTA,
		   LTRIM (RTRIM (CT1.CT1_DESC01)) AS CT1_DESC01,
		   SALDOS.CC,
		   SALDOS.FILIAL,
		   SUM (ORCADO_ANO       * CASE NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END) AS ORC_ANO,
		   'F' AS ORC_ANO_FP,
		   0 AS ORC_ANO_AV,
		   SUM (ORCADO           * CASE NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END) AS ORC_PER,
		   'F' AS ORC_PER_FP,
		   0 AS ORC_PER_AV,
		   SUM (REA_MES          * CASE NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END * CASE WHEN NIVEIS.ORDEM IN (2,4,6) THEN -1 ELSE 1 END) AS REA_MES,
		   'F' AS REA_MES_FP,
		   0 AS REA_MES_AV,
		   SUM (REALIZADO        * CASE NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END * CASE WHEN NIVEIS.ORDEM IN (2,4,6) THEN -1 ELSE 1 END) AS REA_PER,
		   'F' AS REA_PER_FP,
		   0 AS REA_PER_AV,
		   SUM (REALIZADO_ANOANT * CASE NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END * CASE WHEN NIVEIS.ORDEM IN (2,4,6) THEN -1 ELSE 1 END) AS REA_ANT,
		   'F' AS REA_ANT_FP,
		   0 AS REA_ANT_AV,
		   ISNULL (NIVEIS.PAGTO_FIN_BANC, 'N') AS PAGTO_FIN_BANC,
		   ISNULL (NIVEIS.EH_DEPRECIACAO, 'N') AS EH_DEPRECIACAO,
		   ISNULL (NIVEIS.INFORMATIVO, 'S') AS INFORMATIVO,
		   'N' AS DESTACAR,
		   'N' AS PERSISTIR,
		   '' AS FILTRACC
		FROM CT1010 CT1, SALDOS
			LEFT JOIN NIVEIS ON (SALDOS.CONTA BETWEEN NIVEIS.CTS_CT1INI AND NIVEIS.CTS_CT1FIM AND SALDOS.CC BETWEEN NIVEIS.CTS_CTTINI AND NIVEIS.CTS_CTTFIM)
		WHERE CT1.D_E_L_E_T_ = ''
		AND CT1.CT1_FILIAL = '  '
		AND CT1.CT1_CONTA = SALDOS.CONTA
		AND (SALDOS.ORCADO_ANO != 0 OR SALDOS.ORCADO != 0 OR SALDOS.REALIZADO != 0 OR REALIZADO_ANOANT != 0)
		GROUP BY NIVEIS.CTS_CODPLA, NIVEIS.ORDEM, NIVEIS.DESC_N1, NIVEIS.DESC_N2, SALDOS.CONTA, CT1.CT1_DESC01, SALDOS.FILIAL, SALDOS.CC, NIVEIS.PAGTO_FIN_BANC, NIVEIS.EH_DEPRECIACAO, NIVEIS.INFORMATIVO
	)

	INSERT INTO @RET SELECT * FROM GRUPOS_COM_SALDOS

	-- ATEH AQUI OS DADOS FORAM LIDOS 100% DA CONTABILIDADE. ENTRETANTO, O CPV SOMENTE APARECE DEPOIS QUE FOR FEITA A
	-- CONTABILIZACAO DO CUSTO MEDIO. POR ISSO, VAMOS PEGAR DO SD2 ENQUANTO O MEDIO ESTIVER ABERTO.
	-- GLPI 10497	IF (@DATAFIM > @DTLIMCPV)
	IF (SUBSTRING (@DATAFIM, 1, 6) > SUBSTRING (@DTLIMCPV, 1, 6))
	BEGIN
		UPDATE R
		SET REA_MES += ISNULL ((SELECT SUM (F.CUSTOMEDIO)
						FROM BI_ALIANCA.dbo.VA_FATDADOS F
						WHERE F.EMPRESA = '01'
						AND F.FILIAL = R.FILIAL
						AND F.EMISSAO BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
						AND F.EMISSAO BETWEEN SUBSTRING (@DATAFIM, 1, 6) + '01' AND @DATAFIM  -- SOMENTE O ULTIMO MES
						AND F.EMISSAO > @DTLIMCPV
						AND F.F4_MARGEM = '1'
						), 0) * -1
			, REA_MES_FP = 'P'
			, REA_PER += ISNULL ((SELECT SUM (F.CUSTOMEDIO)
						FROM BI_ALIANCA.dbo.VA_FATDADOS F
						WHERE F.EMPRESA = '01'
						AND F.FILIAL = R.FILIAL
						AND F.EMISSAO BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
						AND F.EMISSAO BETWEEN @DATAINI      AND @DATAFIM
						AND F.EMISSAO > @DTLIMCPV
						AND F.F4_MARGEM = '1'
						), 0) * -1
			, REA_PER_FP = 'P'
		FROM @RET R
		WHERE CODPLA = @VISAO_PRINCIPAL
		AND ORDEM = 6
		AND INFORMATIVO != 'S'  -- PODERIA PEGAR PELA DESCRICAO 'CUSTOS PRODUCAO', MAS ACHEI POUCO SEGURO.
		AND NIVEL = 3
		-- VOU JOGAR TUDO NA PRIMEIRA CONTA DO CPV
		AND DESC_N1 + DESC_N2 + CONTA + FILIAL + CC = (SELECT TOP 1 DESC_N1 + DESC_N2 + CONTA + FILIAL + CC
														FROM @RET R2
														WHERE R2.CODPLA = @VISAO_PRINCIPAL
															AND R2.ORDEM  = R.ORDEM
															AND R2.DESC_N1 = R.DESC_N1
															AND R2.DESC_N2 = R.DESC_N2
															AND R2.NIVEL  = R.NIVEL
															AND R2.FILIAL = R.FILIAL
															)
	END
	
	

	-- MONTA TABELA COM AS LIBERACOES EXISTENTES PARA O(S) PERFIL(IS) DO USUARIO QUE SOLICITOU A CONSULTA
	DECLARE @LIBERACOES TABLE(
		LIB_CC VARCHAR (9) INDEX IDX1,
		LIB_CONTA VARCHAR (20) INDEX IDX2)

	INSERT INTO @LIBERACOES (LIB_CC, LIB_CONTA)
	SELECT DISTINCT ISNULL (TrnCtbLibCC.TrnCtbLibCC, ''), ISNULL (TrnCtbLibCCConta.TrnCtbLibNrConta, '')
		FROM LKSRV_NAWEB.naweb.dbo.TrnCtbLib
			LEFT JOIN LKSRV_NAWEB.naweb.dbo.TrnCtbLibCC
				left join LKSRV_NAWEB.naweb.dbo.TrnCtbLibCCConta
				on (TrnCtbLibCCConta.TrnCtbLibPerfilId = TrnCtbLibCC.TrnCtbLibPerfilId and TrnCtbLibCCConta.TrnCtbLibCC = TrnCtbLibCC.TrnCtbLibCC)
			on (TrnCtbLibCC.TrnCtbLibPerfilId = TrnCtbLib.TrnCtbLibPerfilId)
	WHERE TrnCtbLib.TrnCtbLibPerfilId IN (@PERFIL1, @PERFIL2, @PERFIL3, @PERFIL4, @PERFIL5)


	-- ALTERA O CAMPO 'PERSISTIR' PARA OS REGISTROS QUE DEVEM PERMANECER NA TABELA
	--
	-- QUANDO FOI USADA LIBERACAO 'POR GRUPO'
	UPDATE @RET SET PERSISTIR = 'S'
	WHERE EXISTS (SELECT * FROM @LIBERACOES L WHERE CC LIKE L.LIB_CC AND 'GRUPO' + CAST (ORDEM AS VARCHAR (2)) = L.LIB_CONTA)
	--
	-- QUANDO FOI USADA LIBERACAO 'POR CONTA'
	UPDATE @RET SET PERSISTIR = 'S'
	WHERE EXISTS (SELECT * FROM @LIBERACOES L WHERE CC LIKE L.LIB_CC AND CONTA LIKE L.LIB_CONTA)

	-- REMOVE AS LINHAS QUE NAO DEVEM PERSISTIR (POR QUE O PERFIL DO SOLICITANTE NAO TEM ACESSO)
	DELETE @RET WHERE PERSISTIR != 'S'


	-- CRIA LINHAS PARA TOTAIS CALCULADOS
	DECLARE @DESCRI_GRUPO VARCHAR (40);

	-- GERA LINHAS DE TOTAIS CALCULADOS
	SET @DESCRI_GRUPO = '3.(=)RECEITA BRUTA BASE ICMS' ; INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL)           VALUES (@VISAO_PRINCIPAL, 3,  @DESCRI_GRUPO, @DESCRI_GRUPO, 1)
	UPDATE @RET SET ORC_ANO    = (SELECT SUM (ORC_ANO)    FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')
				   ,ORC_ANO_FP = (SELECT MAX (ORC_ANO_FP) FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = (SELECT SUM (ORC_PER)    FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')
				   ,ORC_PER_FP = (SELECT MAX (ORC_PER_FP) FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = (SELECT SUM (REA_MES)    FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')
				   ,REA_MES_FP = (SELECT MAX (REA_MES_FP) FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = (SELECT SUM (REA_PER)    FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')
				   ,REA_PER_FP = (SELECT MAX (REA_PER_FP) FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = (SELECT SUM (REA_ANT)    FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')
				   ,REA_ANT_FP = (SELECT MAX (REA_ANT_FP) FROM @RET WHERE ORDEM IN (1, 2) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 3

	SET @DESCRI_GRUPO = '5.(=)RECEITA LIQUIDA'         ; INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, DESTACAR) VALUES (@VISAO_PRINCIPAL, 5,  @DESCRI_GRUPO, @DESCRI_GRUPO, 1, 'S')
	UPDATE @RET SET ORC_ANO    = (SELECT SUM (ORC_ANO)    FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')
				   ,ORC_ANO_FP = (SELECT MAX (ORC_ANO_FP) FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = (SELECT SUM (ORC_PER)    FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')
				   ,ORC_PER_FP = (SELECT MAX (ORC_PER_FP) FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = (SELECT SUM (REA_MES)    FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')
				   ,REA_MES_FP = (SELECT MAX (REA_MES_FP) FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = (SELECT SUM (REA_PER)    FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')
				   ,REA_PER_FP = (SELECT MAX (REA_PER_FP) FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = (SELECT SUM (REA_ANT)    FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')
				   ,REA_ANT_FP = (SELECT MAX (REA_ANT_FP) FROM @RET WHERE ORDEM IN (3, 4) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5

	SET @DESCRI_GRUPO = '8.(=)SOBRA OPERACIONAL BRUTA' ; INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL) VALUES (@VISAO_PRINCIPAL, 8,  @DESCRI_GRUPO, @DESCRI_GRUPO, 1)
	UPDATE @RET SET ORC_ANO    = (SELECT SUM (ORC_ANO)    FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')
				   ,ORC_ANO_FP = (SELECT MAX (ORC_ANO_FP) FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = (SELECT SUM (ORC_PER)    FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')
				   ,ORC_PER_FP = (SELECT MAX (ORC_PER_FP) FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = (SELECT SUM (REA_MES)    FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')
				   ,REA_MES_FP = (SELECT MAX (REA_MES_FP) FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = (SELECT SUM (REA_PER)    FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')
				   ,REA_PER_FP = (SELECT MAX (REA_PER_FP) FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = (SELECT SUM (REA_ANT)    FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')
				   ,REA_ANT_FP = (SELECT MAX (REA_ANT_FP) FROM @RET WHERE ORDEM IN (5, 6) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 8


	-- VALORES CALCULADOS DEVEM APARECER SOMENTE SE O RESPECTIVO GRUPO ESTIVER LIBERADO PARA O USUARIO.
	IF EXISTS (SELECT * FROM @LIBERACOES L WHERE L.LIB_CONTA = 'RESULTADO')
	BEGIN
		SET @DESCRI_GRUPO = '14.(=)SOBRA/PERDA OPERACIONAL'; INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, DESTACAR) VALUES (@VISAO_PRINCIPAL, 14, @DESCRI_GRUPO, @DESCRI_GRUPO, 1, 'S')
		UPDATE @RET SET ORC_ANO    = (SELECT SUM (ORC_ANO)    FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')
					   ,ORC_ANO_FP = (SELECT MAX (ORC_ANO_FP) FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,ORC_PER    = (SELECT SUM (ORC_PER)    FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')
					   ,ORC_PER_FP = (SELECT MAX (ORC_PER_FP) FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_MES    = (SELECT SUM (REA_MES)    FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')
					   ,REA_MES_FP = (SELECT MAX (REA_MES_FP) FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_PER    = (SELECT SUM (REA_PER)    FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')
					   ,REA_PER_FP = (SELECT MAX (REA_PER_FP) FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_ANT    = (SELECT SUM (REA_ANT)    FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')
					   ,REA_ANT_FP = (SELECT MAX (REA_ANT_FP) FROM @RET WHERE ORDEM IN (8,9,10,11,12) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
				WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 14

		SET @DESCRI_GRUPO = '17.(=)RESULT.EXERCICIO ACUMULADO' ; INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, DESTACAR) VALUES (@VISAO_PRINCIPAL, 17, @DESCRI_GRUPO, @DESCRI_GRUPO, 1, 'S')
		UPDATE @RET SET ORC_ANO =    (SELECT SUM (ORC_ANO)    FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')
					   ,ORC_ANO_FP = (SELECT MAX (ORC_ANO_FP) FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,ORC_PER =    (SELECT SUM (ORC_PER)    FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')
					   ,ORC_PER_FP = (SELECT MAX (ORC_PER_FP) FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_MES =    (SELECT SUM (REA_MES)    FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')
					   ,REA_MES_FP = (SELECT MAX (REA_MES_FP) FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_PER =    (SELECT SUM (REA_PER)    FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')
					   ,REA_PER_FP = (SELECT MAX (REA_PER_FP) FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_ANT =    (SELECT SUM (REA_ANT)    FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')
					   ,REA_ANT_FP = (SELECT MAX (REA_ANT_FP) FROM @RET WHERE ORDEM IN (14,15,16) AND INFORMATIVO != 'S')  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
				WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 17
-- EBITDA vai ser migrado para uma consulta de indicadores financeiros
--		-- EBITDA: GERA UM NIVEL ESPECIFICO PARA EVIDENCIAR O CALCULO
--		INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, CONTA, DESCRICAO, ORC_ANO, ORC_PER, REA_PER, REA_ANT, ORC_ANO_FP, ORC_PER_FP, REA_PER_FP, REA_ANT_FP)
--				VALUES (@VISAO_EBITDA, 18, '18.INFORMATIVOS', 'EBITDA', 3, '(+)' , 'SOBRA/PERDA OPERACIONAL',
--				(SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 14),
--				(SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 14),
--				(SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 14),
--				(SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 14),
--				'F', 'F', 'F', 'F'
--				)
--		INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL, CONTA, DESCRICAO, ORC_ANO, ORC_PER, REA_PER, REA_ANT, ORC_ANO_FP, ORC_PER_FP, REA_PER_FP, REA_ANT_FP)
--				VALUES (@VISAO_EBITDA, 18, '18.INFORMATIVOS', 'EBITDA', 3, '(+ )', 'DEPRECIACAO',
--				(SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL) * -1,
--				(SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL) * -1,
--				(SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL) * -1,
--				(SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL) * -1,
--				'F', 'F', 'F', 'F'
--				)

	END

	-- CALCULA 'ANALISE VERTICAL' (% DE PARTICIPACAO DE CADA LINHA SOBRE DETERMINADO VALOR)
	DECLARE @CEMPORCENTO FLOAT;

	-- ANTES DA RECEITA LIQUIDA, A REFERENCIA (QUEM VALE 100%) EH O TOTAL DAS RECEITAS
	SET @CEMPORCENTO = (SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1)
	IF (@CEMPORCENTO != 0)
		UPDATE @RET SET ORC_ANO_AV = round (ORC_ANO * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM < 5

	SET @CEMPORCENTO = (SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_PER_AV = round (ORC_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM < 5

	SET @CEMPORCENTO = (SELECT SUM (REA_MES) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_MES_AV = round (REA_MES * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM < 5

	SET @CEMPORCENTO = (SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_PER_AV = round (REA_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM < 5

	SET @CEMPORCENTO = (SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_ANT_AV = round (REA_ANT * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM < 5

	-- DEPOIS DA RECEITA LIQUIDA, A REFERENCIA (QUEM VALE 100%) EH A RECEITA LIQUIDA
	SET @CEMPORCENTO = (SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_ANO_AV = round (ORC_ANO * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM >= 5

	SET @CEMPORCENTO = (SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_PER_AV = round (ORC_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM >= 5

	SET @CEMPORCENTO = (SELECT SUM (REA_MES) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_MES_AV = round (REA_MES * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM >= 5

	SET @CEMPORCENTO = (SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_PER_AV = round (REA_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM >= 5

	SET @CEMPORCENTO = (SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 5)
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_ANT_AV = round (REA_ANT * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM >= 5



	-- POSTERIORMENTE, NA TELA DE CONSULTA DO NAWEB, EXISTE A POSSIBILIDADE DE CLICAR EM UMA CONTA PARA
	-- DETALHAR SEUS LCTOS. CONTABEIS. PARA FACILITAR A VISUALIZACAO, FOI SOLICITADO QUE APARECESSEM SOMENTE
	-- OS LCTOS DOS CC RELACIONADOS AO GRUPO QUE ESTIVER SENDO VERIFICADO, OU SEJA: AO CONSULTAR AS DESPESAS
	-- ADMINISTRATIVAS, MOSTRAR SOMENTE LCTOS AMARRADOS A CC ADMINISTRATIVOS.
	UPDATE @RET SET FILTRACC = '3' WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 10  -- DESP.ADMINISTRATIVAS
	UPDATE @RET SET FILTRACC = '4' WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 12  -- DESP.COM VENDAS


	-- CRIA LINHAS PARA ACUMULAR NIVEIS
	-- NO NIVEL 2 SOMA AS CONTAS INFORMATIVAS
	INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, DESC_N2, NIVEL,
					 ORC_ANO, ORC_ANO_FP, ORC_ANO_AV,
					 ORC_PER, ORC_PER_FP, ORC_PER_AV,
					 REA_MES, REA_MES_FP, REA_MES_AV,
					 REA_PER, REA_PER_FP, REA_PER_AV,
					 REA_ANT, REA_ANT_FP, REA_ANT_AV)
		SELECT DISTINCT @VISAO_PRINCIPAL, ORDEM, DESC_N1, DESC_N2, 2,
						 SUM (ORC_ANO   ) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 MAX (ORC_ANO_FP) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (ORC_ANO_AV) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 SUM (ORC_PER   ) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 MAX (ORC_PER_FP) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (ORC_PER_AV) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 SUM (REA_MES   ) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 MAX (REA_MES_FP) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_MES_AV) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 SUM (REA_PER   ) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 MAX (REA_PER_FP) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_PER_AV) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 SUM (REA_ANT   ) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),
						 MAX (REA_ANT_FP) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_ANT_AV) OVER (PARTITION BY ORDEM, DESC_N1, DESC_N2)
		FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND NIVEL = 3
		AND NIVEL != 1  -- AS LINHAS DE TOTAIS SAO UNICAS E NAO HA NECESSIDADE DE CALCULAR NIVEIS PARA ELAS.

	-- NO NIVEL 1 NAO DEVE SOMAR AS CONTAS INFORMATIVAS
	INSERT INTO @RET (CODPLA, ORDEM, DESC_N1, NIVEL,
					 ORC_ANO, ORC_ANO_FP, ORC_ANO_AV,
					 ORC_PER, ORC_PER_FP, ORC_PER_AV,
					 REA_MES, REA_MES_FP, REA_MES_AV,
					 REA_PER, REA_PER_FP, REA_PER_AV,
					 REA_ANT, REA_ANT_FP, REA_ANT_AV)
		SELECT DISTINCT @VISAO_PRINCIPAL, ORDEM, DESC_N1, 1,
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_ANO    END) OVER (PARTITION BY ORDEM, DESC_N1),
						MAX (ORC_ANO_FP) OVER (PARTITION BY ORDEM, DESC_N1),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_ANO_AV END) OVER (PARTITION BY ORDEM, DESC_N1),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_PER    END) OVER (PARTITION BY ORDEM, DESC_N1),
						MAX (ORC_PER_FP) OVER (PARTITION BY ORDEM, DESC_N1),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_PER_AV END) OVER (PARTITION BY ORDEM, DESC_N1),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_MES    END) OVER (PARTITION BY ORDEM, DESC_N1),
						MAX (REA_MES_FP) OVER (PARTITION BY ORDEM, DESC_N1),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_MES_AV END) OVER (PARTITION BY ORDEM, DESC_N1),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_PER    END) OVER (PARTITION BY ORDEM, DESC_N1),
						MAX (REA_PER_FP) OVER (PARTITION BY ORDEM, DESC_N1),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_PER_AV END) OVER (PARTITION BY ORDEM, DESC_N1),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_ANT    END) OVER (PARTITION BY ORDEM, DESC_N1),
						MAX (REA_ANT_FP) OVER (PARTITION BY ORDEM, DESC_N1),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_ANT_AV END) OVER (PARTITION BY ORDEM, DESC_N1)
		FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND NIVEL = 3
		AND NIVEL != 1  -- AS LINHAS DE TOTAIS SAO UNICAS E NAO HA NECESSIDADE DE CALCULAR NIVEIS PARA ELAS.

	-- MARCA A PRIMMEIRA LINHA PARA SER DESTACADA, PARA EVIDENCIAR O FATURAMENTO
	UPDATE @RET SET DESTACAR = 'S', ORC_ANO_AV = 0, ORC_PER_AV = 0, REA_MES_AV = 0, REA_PER_AV = 0, REA_ANT_AV = 0 WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 1 AND NIVEL = 1

	-- NAO QUEREMOS MAIS VISUALIZAR ESSE GRUPO, MAS ELE FOI MANTIDO ATEH AGORA POR QUE PARTICIPA DE CALCULOS.
	DELETE @RET WHERE CODPLA = @VISAO_PRINCIPAL AND ORDEM = 3

RETURN
END
GO
