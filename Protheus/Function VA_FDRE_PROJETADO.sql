SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Descricao: Retorna tabela para consulta de DRE projetado no NaWeb. Implementado em forma de funcao por que,
--            com query simples usando CTE, ficava muito pesado para fazer os NIVELs.
--            Criado com base na funcao VA_FCONS_ORCAMENTO_525
-- Autor....: Robert Koch
-- Data.....: 22/07/2022
--
-- Historico de alteracoes:
--

/* Ao copiar a visao gerenciao 525 para 527 acusou inconsistencia nas contas abaixo:
770
801
801 (novamente)
807
808
837
*/

ALTER FUNCTION [dbo].[VA_FDRE_PROJETADO]
-- PARAMETROS DE CHAMADA
(
	@FILINI   AS VARCHAR(2),
	@FILFIM   AS VARCHAR(2),
	@ANO      AS VARCHAR(4),
	@MESINI   AS VARCHAR(2),
	@MESFIM   AS VARCHAR(2),
	@PERFIL1  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL2  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL3  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL4  AS SMALLINT,  -- Usuario pode estar em mais de um perfil do NaWeb
	@PERFIL5  AS SMALLINT   -- Usuario pode estar em mais de um perfil do NaWeb
)

	-- CRIA TABELA TEMPORARIA PARA RETORNO DA FUNCAO
	returns @RET TABLE (CODPLA  VARCHAR (3)
		,ORDEM          FLOAT  DEFAULT 0
		,CODGRUPO          VARCHAR (6)  DEFAULT ''
		,GRUPO          VARCHAR (40) DEFAULT ''
		,SUBGRUPO       VARCHAR (60) DEFAULT ''
		,SUBGRUPO2      VARCHAR (60) DEFAULT ''
		,NIVEL          VARCHAR (1)  DEFAULT 3
		,CONTA          VARCHAR (20) DEFAULT ''
		,DESCCONTA      VARCHAR (40) DEFAULT ''
		,CC             VARCHAR (9)  DEFAULT ''
		,FILIAL         VARCHAR (2)  DEFAULT ''
		,ORC_ANO        FLOAT        default 0
		,ORC_ANO_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
		,ORC_ANO_AV     FLOAT        default 0
		,ORC_PER        FLOAT        default 0
		,ORC_PER_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
		,ORC_PER_AV     FLOAT        default 0
		,REA_MES        FLOAT        default 0
		,REA_MES_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
		,REA_MES_AV     FLOAT        default 0
		,REA_PER        FLOAT        default 0
		,REA_PER_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
		,REA_PER_AV     FLOAT        default 0
		,REA_ANT        FLOAT        default 0
		,REA_ANT_FP     VARCHAR (1)  default ''  -- INDICA SE EH UM VALOR [F]IRME OU [P]REVISTO (MOSTRA DE FORMA DIFERENCIADA EM TELA)
		,REA_ANT_AV     FLOAT        default 0
		,PAG_FIN_BANC   VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH PAGTO.FINANCIAMENTOS BANCARIOS (LINHA APENAS INFORMATIVA, NAO DEVE SER COMPUTADA NOS TOTAIS)
		,EH_DEPRECIACAO VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH DEPRECIACAO, PARA POSTERIOR CALCULO DE EBITDA.
		,INFORMATIVO    VARCHAR (1)  DEFAULT 'N' -- INDICA SE EH APENAS INFORMATIVO E NAO DEVE SER SOMADO AOS TOTAIS.
		,PERSISTIR      VARCHAR (1)  DEFAULT 'N'  -- INDICA SE, APOS FILTRAGEM DOS ACESSOS DO USUARIO, ESTE REGISTRO DEVE PERSISTIR.
		,FILTRACC       VARCHAR (9)  DEFAULT ''   -- INDICA INICIO DO CODIGO DE CC A SER FILTRADO (PARA CONSULTA DE LCTOS CONTABEIS QUE EH CHAMADA A PARTIR DO NAWEB)
		unique NONCLUSTERED (CODPLA, ORDEM, CODGRUPO, GRUPO, SUBGRUPO, SUBGRUPO2, NIVEL, CONTA, FILIAL, CC)
		)

AS
BEGIN

	DECLARE @VISAO_PRINCIPAL VARCHAR (3) = '527';
	DECLARE @DATAINI         VARCHAR (8) = @ANO + @MESINI + '01';
	DECLARE @DATAFIM         VARCHAR (8) = @ANO + @MESFIM + '31';
	DECLARE @ANO_ANT         VARCHAR (4) = @ANO - 1;
	DECLARE @DATAINIANT      VARCHAR (8) = @ANO_ANT + SUBSTRING (@DATAINI, 5, 4);
	DECLARE @DATAFIMANT      VARCHAR (8) = @ANO_ANT + SUBSTRING (@DATAFIM, 5, 4);

	-- O CPV SOMENTE APARECE DEPOIS QUE FOR FEITA A CONTABILIZACAO DO CUSTO MEDIO.
	-- POR ISSO, VAMOS PEGAR DO SD2 ENQUANTO O MEDIO ESTIVER ABERTO.
	DECLARE @DTLIMCPV VARCHAR (8) = (SELECT MIN (B9_DATA)
									FROM (SELECT B9_FILIAL, MAX (B9_DATA) AS B9_DATA
											FROM SB9010
											WHERE D_E_L_E_T_ = ''
											AND B9_FILIAL NOT IN ('02','04','05','06','12','14','15')
											GROUP BY B9_FILIAL) ULTIMOS_SB9)

	-- GERA UMA CTE (COMMON TABLE EXPRESSION - ESPECIE DE TABELA TEMPORARIA) COM
	-- A ESTRUTURA PRINCIPAL DA CONSULTA, COM SUAS DESCRICOES E GRUPOS.
	;WITH ESTRUTURA AS (
		          SELECT '01'    AS CODGRUPO, '01. (+)INGRESSOS E RECEITAS'       AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '02'    AS CODGRUPO, '02. (-)DEVOLUCOES'                 AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '03.1'  AS CODGRUPO, '03. (-)IMPOSTOS'                   AS GRUPO, 'COFINS'                      AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '03.2'  AS CODGRUPO, '03. (-)IMPOSTOS'                   AS GRUPO, 'ICMS'                        AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '03.3'  AS CODGRUPO, '03. (-)IMPOSTOS'                   AS GRUPO, 'IPI'                         AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '03.4'  AS CODGRUPO, '03. (-)IMPOSTOS'                   AS GRUPO, 'Icms ST'                     AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '03.5'  AS CODGRUPO, '03. (-)IMPOSTOS'                   AS GRUPO, 'PIS'                         AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '04'    AS CODGRUPO, '04. (=)RECEITA LIQUIDA'            AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '05.1'  AS CODGRUPO, '05. (-)CPV'                        AS GRUPO, 'CUSTOS PRODUCAO'             AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '05.2'  AS CODGRUPO, '05. (-)CPV'                        AS GRUPO, 'GGF'                         AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '05.3'  AS CODGRUPO, '05. (-)CPV'                        AS GRUPO, 'MO'                          AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '06'    AS CODGRUPO, '06. (=)SOBRA OPERACIONAL BRUTA'    AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '07.11' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM VENDAS'      AS SUBGRUPO, 'COMISSOES'        AS SUBGRUPO2
		UNION ALL SELECT '07.12' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM VENDAS'      AS SUBGRUPO, 'FRETES'           AS SUBGRUPO2
		UNION ALL SELECT '07.13' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM VENDAS'      AS SUBGRUPO, 'INVESTIMENTOS'    AS SUBGRUPO2
		UNION ALL SELECT '07.14' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM VENDAS'      AS SUBGRUPO, 'OUTROS'           AS SUBGRUPO2
		UNION ALL SELECT '07.15' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM VENDAS'      AS SUBGRUPO, 'RAPEL'            AS SUBGRUPO2
		UNION ALL SELECT '07.21' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM PESSOAL'     AS SUBGRUPO, '(-)PESSOAL ADMIN' AS SUBGRUPO2
		UNION ALL SELECT '07.22' AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS COM PESSOAL'     AS SUBGRUPO, '(-)PESSOAL COML'  AS SUBGRUPO2
		UNION ALL SELECT '07.3'  AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS ADMINISTRATIVAS' AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '07.4'  AS CODGRUPO, '07. (-)DESPESAS OPERACIONAIS'      AS GRUPO, '(-)DESPESAS TRIBUTARIAS'     AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '08'    AS CODGRUPO, '08. SOBRA/PERDA OPERACIONAL'       AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '09.1'  AS CODGRUPO, '09. RESULTADO FINANCEIRO'          AS GRUPO, 'DESPESAS FINANCEIRAS'        AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '09.2'  AS CODGRUPO, '09. RESULTADO FINANCEIRO'          AS GRUPO, 'RECEITAS FINANCEIRAS'        AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '10.1'  AS CODGRUPO, '10. RESULTADO NAO OPERACIONAL'     AS GRUPO, '(+)NAO OPERACIONAL'          AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '10.2'  AS CODGRUPO, '10. RESULTADO NAO OPERACIONAL'     AS GRUPO, '(+)SUBVENCOES FISCAIS'       AS SUBGRUPO, '.'                AS SUBGRUPO2
		UNION ALL SELECT '99'    AS CODGRUPO, '99. CONTAS NAO CLASSIFICADAS'      AS GRUPO, '.'                           AS SUBGRUPO, '.'                AS SUBGRUPO2
	)

	-- GERA UMA CTE COM DADOS DA TABELA TABELA CTS (VISOES GERENCIAIS DA CONTABILIDADE)
	-- CONTENDO OS CAMPOS QUE VOU PRECISAR, JAH FILTRADO PELA VISAO QUE ME INTERESSA.
	, SUB_CTS AS (
		SELECT CTS.CTS_CODPLA
			, CTS.CTS_VAGDRE
			, CTS.CTS_NORMAL
			, CTS.CTS_CT1INI
			, CTS.CTS_CT1FIM
			, CTS.CTS_CTTINI
			, CTS.CTS_CTTFIM
			, CTS_VAPGFI AS PAGTO_FIN_BANC
			, CTS_VADPR  AS EH_DEPRECIACAO
			, CTS_VASINF AS INFORMATIVO
		FROM CTS010 CTS
		WHERE CTS.D_E_L_E_T_ = ''
		  AND CTS.CTS_FILIAL = '  '
		  AND CTS.CTS_CODPLA = @VISAO_PRINCIPAL
		  AND CTS.CTS_CLASSE = '2'
	)

	-- GERA UMA CTE JUNTANDO A ESTRUTURA COM OS DADOS DA CTE ANTERIOR, DE
	-- FORMA A TER A ESTRUTURA EM UM FORMATO SEMELHENTE A TABELA CTS (VISOES
	-- GERENCIAIS) DA CONTABILIDADE, MAS JAH COM COLUNAS ADICIONAIS PARA
	-- AJUDAR A CALCULAR OS DADOS.
	-- USA LEFT JOIN POR QUE QUERO TER TODAS AS LINHAS DA ESTRUTURA, MESMO
	-- QUE ZERADAS (EX:TOTAIS), QUANDO NAO ENCONTRAR NADA NA TABELA CTS.
	-- TEREI APENAS CONTA INICIAL E FINAL; NAO TEREI CONTA A CONTA AINDA.
	, SUB_NIVEIS AS (
		SELECT ESTRUTURA.CODGRUPO, ESTRUTURA.GRUPO, ESTRUTURA.SUBGRUPO, ESTRUTURA.SUBGRUPO2, SUB_CTS.*
		FROM ESTRUTURA
			LEFT JOIN SUB_CTS
				ON (SUB_CTS.CTS_VAGDRE = ESTRUTURA.CODGRUPO)
	)

	-- GERA UMA CTE COM SALDOS POR CONTA E CC DA CONTABILIDADE, PARA PODER,
	-- POSTERIORMENTE, JUNTAR COM A CTE DE NIVEIS/GRUPOS GERADA ANTERIORMENTE.
	-- QUANDO O INTERVALO SOLICITADO PARA A CONSULTA COMPREENDER UM FOR PERIODO
	-- AINDA NAO FECHADO NO ESTOQUE, VOU PEGAR O CPV DA CONTABILIDADE APENAS
	-- ATEH O MES FECHADO, E O RESTANTE BUSCAREI POSTERIORMENTE DO FATURAMENTO.
	, SUB_SALDOS AS (
		SELECT CQ3_FILIAL AS FILIAL,
			CQ3_CONTA AS CONTA,
			'01' + SUBSTRING (CQ3_CCUSTO, 3, 7) AS CC,  -- VISUALIZA OS CC SEMPRE COMO 'FILIAL 01'
			ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @ANO + '0101' AND @ANO + '1231'
						THEN CQ3_DEBITO - CQ3_CREDIT
						ELSE 0
						END), 0) AS ORCADO_ANO,
			ISNULL (SUM (CASE WHEN CQ3_TPSALD = '0' AND CQ3_DATA BETWEEN @DATAINI      AND @DATAFIM      
						THEN CQ3_DEBITO - CQ3_CREDIT
						ELSE 0
						END), 0) AS ORCADO,
			ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN SUBSTRING (@DATAFIM, 1, 6) + '01' AND @DATAFIM  -- SOMENTE DENTRO DO ULTIMO MES
						-- SE FOR CONTA DO CPV, LIMITA-SE A DATA DO ULTIMO FECHAMENTO DO ESTOQUE
							AND (CQ3_CONTA NOT IN ('402010101001','402010101002','402010101004','402010201001','402010201002')  -- TAH, EU SEI QUE NAO DEVIA CHUMBAR AS CONTAS AQUI...
								OR CQ3_DATA <= @DTLIMCPV)
						THEN CQ3_DEBITO - CQ3_CREDIT
						ELSE
						0 END), 0) AS REA_MES,
			ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN @DATAINI      AND @DATAFIM
						-- SE FOR CONTA DO CPV, LIMITA-SE A DATA DO ULTIMO FECHAMENTO DO ESTOQUE
							AND (CQ3_CONTA NOT IN ('402010101001','402010101002','402010101004','402010201001','402010201002')  -- TAH, EU SEI QUE NAO DEVIA CHUMBAR AS CONTAS AQUI...
								OR CQ3_DATA <= @DTLIMCPV)
						THEN CQ3_DEBITO - CQ3_CREDIT
						ELSE 0
						END), 0) AS REALIZADO,
			ISNULL (SUM (CASE WHEN CQ3_TPSALD = '1' AND CQ3_DATA BETWEEN @DATAINIANT   AND @DATAFIMANT
						THEN CQ3_DEBITO - CQ3_CREDIT
						ELSE 0
						END), 0) AS REALIZADO_ANOANT
		FROM CQ3010
		WHERE D_E_L_E_T_ = ''
		AND CQ3_DATA BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
		AND CQ3_FILIAL BETWEEN @FILINI AND @FILFIM
		AND (CQ3_CONTA like '4%' or CQ3_CONTA like '7%')
		AND (CQ3_CONTA < '701011001005' OR CQ3_CONTA > '7010110011039')  -- CONTAS TIPO 'CC' DEVEM SER DESCONSIDERADAS.
		AND CQ3_LP != 'Z' -- IGNORAR AS CONTAS DE ZERAMENTO (VIRADA DE EXERCICIO)
		GROUP BY CQ3_FILIAL
			,CQ3_CONTA
			,'01' + SUBSTRING (CQ3_CCUSTO, 3, 7)
	)

	-- GERA CTE FINAL, JUNTANDO A CTE DE SALDOS COM A CTE DOS NIVEIS/GRUPOS.
	-- A CTE PRINCIPAL EH A DE SALDOS, FAZENDO LEFT JOIN COM A DE NIVEIS,
	-- POR QUE PRECISO CONSIDERAR TODAS AS CONTAS COM SALDO. QUANDO ALGUMA
	-- CONTA TEM SALDO, MAS NAO CONSTA NA CTE DE NIVEIS/GRUPOS, EH POR QUE
	-- NAO ESTAVA CADASTRADA NA VISAO GERENCIAL E VAI SER MOSTRADA COMO UM
	-- GRUPO SEPARADO (99) NO FINAL, JUSTAMENTE PARA CHAMAR A ATENCAO.
	,SUB_FINAL AS (
	SELECT
		ISNULL (SUB_NIVEIS.CTS_CODPLA, @VISAO_PRINCIPAL) AS CODPLA,
		0 AS ORDEM,
		ISNULL (SUB_NIVEIS.CODGRUPO,     '99') AS CODGRUPO,
		ISNULL (SUB_NIVEIS.GRUPO,     'CONTAS SEM CLASSIFICACAO') AS GRUPO,      --ISNULL (SUB_NIVEIS.GRUPO,    'ANTIGO 18.INFORMATIVOS') AS GRUPO,
		ISNULL (SUB_NIVEIS.SUBGRUPO,  'CONTAS SEM CLASSIFICACAO') AS SUBGRUPO,   --ISNULL (SUB_NIVEIS.SUBGRUPO, 'SEM CLASSIFICACAO') AS SUBGRUPO,
		ISNULL (SUB_NIVEIS.SUBGRUPO2, 'CONTAS SEM CLASSIFICACAO') AS SUBGRUPO2,  --ISNULL (SUB_NIVEIS.SUBGRUPO2, 'SEM CLASSIFICACAO') AS SUBGRUPO2,
		3 AS NIVEL,
		ISNULL (SUB_SALDOS2.CONTA, '') AS CONTA,
		ISNULL (SUB_SALDOS2.DESCRI_CONTA, '') AS DESCRI_CONTA,
		ISNULL (SUB_SALDOS2.CC, '') AS CC,
		ISNULL (SUB_SALDOS2.FILIAL, '') AS FILIAL,
		ISNULL (SUM (ORCADO_ANO       * CASE SUB_NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END), 0) AS ORC_ANO,
		'F' AS ORC_ANO_FP,
		0 AS ORC_ANO_AV,
		ISNULL (SUM (ORCADO           * CASE SUB_NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END), 0) AS ORC_PER,
		'F' AS ORC_PER_FP,
		0 AS ORC_PER_AV,
		ISNULL (SUM (REA_MES          * CASE SUB_NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END
				* CASE WHEN SUBSTRING (SUB_NIVEIS.CODGRUPO, 1, 2) IN ('02', '03', '05') THEN -1 ELSE 1 END)  -- DEVOLUCOES, IMPOSTOS E CPV ENTRAM COMO NEGATIVOS
			, 0) AS REA_MES,
		'F' AS REA_MES_FP,
		0 AS REA_MES_AV,
		ISNULL (SUM (REALIZADO        * CASE SUB_NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END
				* CASE WHEN SUBSTRING (SUB_NIVEIS.CODGRUPO, 1, 2) IN ('02', '03', '05') THEN -1 ELSE 1 END)  -- DEVOLUCOES, IMPOSTOS E CPV ENTRAM COMO NEGATIVOS
			, 0) AS REA_PER,
		'F' AS REA_PER_FP,
		0 AS REA_PER_AV,
		ISNULL (SUM (REALIZADO_ANOANT * CASE SUB_NIVEIS.CTS_NORMAL WHEN '1' THEN 1 ELSE -1 END
				* CASE WHEN SUBSTRING (SUB_NIVEIS.CODGRUPO, 1, 2) IN ('02', '03', '05') THEN -1 ELSE 1 END)  -- DEVOLUCOES, IMPOSTOS E CPV ENTRAM COMO NEGATIVOS
			, 0) AS REA_ANT,
		'F' AS REA_ANT_FP,
		0 AS REA_ANT_AV,
		ISNULL (SUB_NIVEIS.PAGTO_FIN_BANC, 'N') AS PAGTO_FIN_BANC,
		ISNULL (SUB_NIVEIS.EH_DEPRECIACAO, 'N') AS EH_DEPRECIACAO,
		ISNULL (SUB_NIVEIS.INFORMATIVO,    'S') AS INFORMATIVO,
		'N' AS PERSISTIR,
		'' AS FILTRACC
		FROM
			-- TABELA PRINCIPAL POR QUE QUERO TODOS OS SEUS REGISTROS, INCLUSIVE
			-- AS LINHAS DE TOTAIS, QUE TERAO SEUS VALORES CALCULADOS POSTERIORMENTE.
			SUB_NIVEIS  
				-- SUBQUERY DA CTE DE SALDOS + CT1 PARA TER AS DESCRICOES DAS CONTAS.
				LEFT JOIN (SELECT SUB_SALDOS.*
								, LTRIM (RTRIM (CT1.CT1_DESC01)) AS DESCRI_CONTA
							FROM SUB_SALDOS
								,CT1010 CT1
							WHERE (SUB_SALDOS.ORCADO_ANO  != 0
								OR SUB_SALDOS.ORCADO    != 0
								OR SUB_SALDOS.REALIZADO != 0
								OR REALIZADO_ANOANT     != 0)  -- CONTAS TOTALMENTE ZERADAS NEM VOU MOSTRAR.
								AND CT1.D_E_L_E_T_ = ''
								AND CT1.CT1_FILIAL = '  '
								AND CT1.CT1_CONTA = SUB_SALDOS.CONTA) AS SUB_SALDOS2
				-- AS CONTAS E CC CUJO SALDO VOU ACUMULAR DEVEM ESTAR DENTRO DO INTERVALO.
				ON (SUB_SALDOS2.CONTA BETWEEN SUB_NIVEIS.CTS_CT1INI AND SUB_NIVEIS.CTS_CT1FIM
				AND SUB_SALDOS2.CC    BETWEEN SUB_NIVEIS.CTS_CTTINI AND SUB_NIVEIS.CTS_CTTFIM)

		GROUP BY SUB_NIVEIS.CTS_CODPLA
			,SUB_NIVEIS.CODGRUPO
			,SUB_NIVEIS.GRUPO
			,SUB_NIVEIS.SUBGRUPO
			,SUB_NIVEIS.SUBGRUPO2
			,SUB_SALDOS2.CONTA
			,SUB_SALDOS2.DESCRI_CONTA
			,SUB_SALDOS2.FILIAL
			,SUB_SALDOS2.CC
			,SUB_NIVEIS.PAGTO_FIN_BANC
			,SUB_NIVEIS.EH_DEPRECIACAO
			,SUB_NIVEIS.INFORMATIVO
	)

	INSERT INTO @RET SELECT * FROM SUB_FINAL

	-- ATEH AQUI OS DADOS FORAM LIDOS 100% DA CONTABILIDADE. ENTRETANTO, O CPV SOMENTE APARECE DEPOIS QUE FOR FEITA A
	-- CONTABILIZACAO DO CUSTO MEDIO. POR ISSO, VAMOS PEGAR DO SD2 ENQUANTO O MEDIO ESTIVER ABERTO.
	-- GLPI 10497	IF (@DATAFIM > @DTLIMCPV)
	IF (SUBSTRING (@DATAFIM, 1, 6) > SUBSTRING (@DTLIMCPV, 1, 6))
	BEGIN
		UPDATE R
		SET REA_MES += ISNULL ((SELECT SUM (F.CUSTOMEDIO)
						FROM BI_ALIANCA.dbo.VA_FATDADOS F
						WHERE F.EMPRESA = '01'
						AND F.FILIAL = R.FILIAL
						AND F.EMISSAO BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
						AND F.EMISSAO BETWEEN SUBSTRING (@DATAFIM, 1, 6) + '01' AND @DATAFIM  -- SOMENTE O ULTIMO MES
						AND F.EMISSAO > @DTLIMCPV
						AND F.F4_MARGEM = '1'
						), 0) * -1
			, REA_MES_FP = 'P'
			, REA_PER += ISNULL ((SELECT SUM (F.CUSTOMEDIO)
						FROM BI_ALIANCA.dbo.VA_FATDADOS F
						WHERE F.EMPRESA = '01'
						AND F.FILIAL = R.FILIAL
						AND F.EMISSAO BETWEEN @ANO_ANT + '0101' AND @ANO + '1231'
						AND F.EMISSAO BETWEEN @DATAINI      AND @DATAFIM
						AND F.EMISSAO > @DTLIMCPV
						AND F.F4_MARGEM = '1'
						), 0) * -1
			, REA_PER_FP = 'P'
		FROM @RET R
		WHERE CODPLA = @VISAO_PRINCIPAL
		AND CODGRUPO LIKE '05%'
		AND INFORMATIVO != 'S'  -- PODERIA PEGAR PELA DESCRICAO 'CUSTOS PRODUCAO', MAS ACHEI POUCO SEGURO.
		AND NIVEL = 3
		-- VOU JOGAR TUDO NA PRIMEIRA CONTA DO CPV
		AND GRUPO + SUBGRUPO + CONTA + FILIAL + CC = (SELECT TOP 1 GRUPO + SUBGRUPO + CONTA + FILIAL + CC
														FROM @RET R2
														WHERE R2.CODPLA = @VISAO_PRINCIPAL
															AND R2.CODGRUPO  = R.CODGRUPO
															AND R2.GRUPO = R.GRUPO
															AND R2.SUBGRUPO = R.SUBGRUPO
															AND R2.NIVEL  = R.NIVEL
															AND R2.FILIAL = R.FILIAL
															)
	END
	


	-- MONTA TABELA COM AS LIBERACOES EXISTENTES PARA O(S) PERFIL(IS) DO USUARIO QUE SOLICITOU A CONSULTA
	DECLARE @LIBERACOES TABLE(
		LIB_CC VARCHAR (9) INDEX IDX1,
		LIB_CONTA VARCHAR (20) INDEX IDX2)

	INSERT INTO @LIBERACOES (LIB_CC, LIB_CONTA)
	SELECT DISTINCT ISNULL (TrnCtbLibCC.TrnCtbLibCC, ''), ISNULL (TrnCtbLibCCConta.TrnCtbLibNrConta, '')
		FROM LKSRV_NAWEB.naweb.dbo.TrnCtbLib
			LEFT JOIN LKSRV_NAWEB.naweb.dbo.TrnCtbLibCC
				left join LKSRV_NAWEB.naweb.dbo.TrnCtbLibCCConta
				on (TrnCtbLibCCConta.TrnCtbLibPerfilId = TrnCtbLibCC.TrnCtbLibPerfilId and TrnCtbLibCCConta.TrnCtbLibCC = TrnCtbLibCC.TrnCtbLibCC)
			on (TrnCtbLibCC.TrnCtbLibPerfilId = TrnCtbLib.TrnCtbLibPerfilId)
	WHERE TrnCtbLib.TrnCtbLibPerfilId IN (@PERFIL1, @PERFIL2, @PERFIL3, @PERFIL4, @PERFIL5)


	-- ALTERA O CAMPO 'PERSISTIR' PARA OS REGISTROS QUE DEVEM PERMANECER NA TABELA
	--
	-- QUANDO FOI USADA LIBERACAO 'POR GRUPO'
	UPDATE @RET SET PERSISTIR = 'S'
--	WHERE EXISTS (SELECT * FROM @LIBERACOES L WHERE CC LIKE L.LIB_CC AND 'GRUPO' + CAST (CODGRUPO AS VARCHAR (4)) = L.LIB_CONTA)
	WHERE EXISTS (SELECT * FROM @LIBERACOES L WHERE CC LIKE L.LIB_CC AND 'GRUPO' + CODGRUPO = L.LIB_CONTA)
	--
	-- QUANDO FOI USADA LIBERACAO 'POR CONTA'
	UPDATE @RET SET PERSISTIR = 'S'
	WHERE EXISTS (SELECT * FROM @LIBERACOES L WHERE CC LIKE L.LIB_CC AND CONTA LIKE L.LIB_CONTA)

	-- REMOVE AS LINHAS QUE NAO DEVEM PERSISTIR (POR QUE O PERFIL DO SOLICITANTE NAO TEM ACESSO)
-- depois terei que ver como tratar os subtotais !!!!	DELETE @RET WHERE PERSISTIR != 'S'

	-- CRIA LINHAS PARA TOTAIS CALCULADOS
	DECLARE @DESCRI_GRUPO VARCHAR (40);

/*
	-- GERA LINHAS DE TOTAIS CALCULADOS
	SET @DESCRI_GRUPO = 'ANTIGO 03.(=)RECEITA BRUTA BASE ICMS';
	INSERT INTO @RET (CODPLA,           CODGRUPO, GRUPO,         SUBGRUPO,      NIVEL, CONTA)
	VALUES           (@VISAO_PRINCIPAL, '3',     @DESCRI_GRUPO, @DESCRI_GRUPO, 1,           '.')
	UPDATE @RET SET ORC_ANO    = ISNULL ((SELECT SUM (ORC_ANO)    FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)
				   ,ORC_ANO_FP = ISNULL ((SELECT MAX (ORC_ANO_FP) FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = ISNULL ((SELECT SUM (ORC_PER)    FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)
				   ,ORC_PER_FP = ISNULL ((SELECT MAX (ORC_PER_FP) FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = ISNULL ((SELECT SUM (REA_MES)    FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)
				   ,REA_MES_FP = ISNULL ((SELECT MAX (REA_MES_FP) FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = ISNULL ((SELECT SUM (REA_PER)    FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)
				   ,REA_PER_FP = ISNULL ((SELECT MAX (REA_PER_FP) FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = ISNULL ((SELECT SUM (REA_ANT)    FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)
				   ,REA_ANT_FP = ISNULL ((SELECT MAX (REA_ANT_FP) FROM @RET WHERE CODGRUPO IN ('01', '02') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '3'
*/
--	SET @DESCRI_GRUPO = '04.ANTIGO 05.(=)RECEITA LIQUIDA';
--	INSERT INTO @RET (CODPLA,           CODGRUPO, GRUPO,         SUBGRUPO,      NIVEL, CONTA)
--	VALUES           (@VISAO_PRINCIPAL, '5',     @DESCRI_GRUPO, @DESCRI_GRUPO, 1,           '.')
	UPDATE @RET SET ORC_ANO    = ISNULL ((SELECT SUM (ORC_ANO)    FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)
				   ,ORC_ANO_FP = ISNULL ((SELECT MAX (ORC_ANO_FP) FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = ISNULL ((SELECT SUM (ORC_PER)    FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)
				   ,ORC_PER_FP = ISNULL ((SELECT MAX (ORC_PER_FP) FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = ISNULL ((SELECT SUM (REA_MES)    FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)
				   ,REA_MES_FP = ISNULL ((SELECT MAX (REA_MES_FP) FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = ISNULL ((SELECT SUM (REA_PER)    FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)
				   ,REA_PER_FP = ISNULL ((SELECT MAX (REA_PER_FP) FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = ISNULL ((SELECT SUM (REA_ANT)    FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)
				   ,REA_ANT_FP = ISNULL ((SELECT MAX (REA_ANT_FP) FROM @RET WHERE CODGRUPO IN ('01','02','03') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			--WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '04'
			WHERE CODGRUPO = '04'

SEt @DESCRI_GRUPO = 'ANTIGO 08.(=)SOBRA OPERACIONAL BRUTA';
	INSERT INTO @RET (CODPLA,           CODGRUPO, GRUPO,         SUBGRUPO,      NIVEL, CONTA)
	VALUES           (@VISAO_PRINCIPAL, '8',     @DESCRI_GRUPO, @DESCRI_GRUPO, 1,           '.')
	UPDATE @RET SET ORC_ANO    = ISNULL ((SELECT SUM (ORC_ANO)    FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)
				   ,ORC_ANO_FP = ISNULL ((SELECT MAX (ORC_ANO_FP) FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,ORC_PER    = ISNULL ((SELECT SUM (ORC_PER)    FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)
				   ,ORC_PER_FP = ISNULL ((SELECT MAX (ORC_PER_FP) FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_MES    = ISNULL ((SELECT SUM (REA_MES)    FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)
				   ,REA_MES_FP = ISNULL ((SELECT MAX (REA_MES_FP) FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_PER    = ISNULL ((SELECT SUM (REA_PER)    FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)
				   ,REA_PER_FP = ISNULL ((SELECT MAX (REA_PER_FP) FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
	               ,REA_ANT    = ISNULL ((SELECT SUM (REA_ANT)    FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)
				   ,REA_ANT_FP = ISNULL ((SELECT MAX (REA_ANT_FP) FROM @RET WHERE CODGRUPO IN ('05', '06') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
			WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '8'


	-- VALORES CALCULADOS DEVEM APARECER SOMENTE SE O RESPECTIVO GRUPO ESTIVER LIBERADO PARA O USUARIO.
	IF EXISTS (SELECT * FROM @LIBERACOES L WHERE L.LIB_CONTA = 'RESULTADO')
	BEGIN
		SET @DESCRI_GRUPO = 'ANTIGO 14.(=)SOBRA/PERDA OPERACIONAL';
		INSERT INTO @RET (CODPLA,           CODGRUPO, GRUPO,         SUBGRUPO,      NIVEL, CONTA)
		VALUES           (@VISAO_PRINCIPAL, '14',    @DESCRI_GRUPO, @DESCRI_GRUPO, 1,           '.')
		UPDATE @RET SET ORC_ANO    = ISNULL ((SELECT SUM (ORC_ANO)    FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)
					   ,ORC_ANO_FP = ISNULL ((SELECT MAX (ORC_ANO_FP) FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,ORC_PER    = ISNULL ((SELECT SUM (ORC_PER)    FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)
					   ,ORC_PER_FP = ISNULL ((SELECT MAX (ORC_PER_FP) FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_MES    = ISNULL ((SELECT SUM (REA_MES)    FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)
					   ,REA_MES_FP = ISNULL ((SELECT MAX (REA_MES_FP) FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_PER    = ISNULL ((SELECT SUM (REA_PER)    FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)
					   ,REA_PER_FP = ISNULL ((SELECT MAX (REA_PER_FP) FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_ANT    = ISNULL ((SELECT SUM (REA_ANT)    FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)
					   ,REA_ANT_FP = ISNULL ((SELECT MAX (REA_ANT_FP) FROM @RET WHERE CODGRUPO IN ('08','09','10','11','12') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
				WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '14'

		SET @DESCRI_GRUPO = 'ANTIGO 17.(=)RESULT.EXERCICIO ACUMULADO';
		INSERT INTO @RET (CODPLA,           CODGRUPO, GRUPO,         SUBGRUPO,      NIVEL, CONTA)
		VALUES           (@VISAO_PRINCIPAL, '17',    @DESCRI_GRUPO, @DESCRI_GRUPO, 1,           '.')
		UPDATE @RET SET ORC_ANO =    ISNULL ((SELECT SUM (ORC_ANO)    FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)
					   ,ORC_ANO_FP = ISNULL ((SELECT MAX (ORC_ANO_FP) FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,ORC_PER =    ISNULL ((SELECT SUM (ORC_PER)    FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)
					   ,ORC_PER_FP = ISNULL ((SELECT MAX (ORC_PER_FP) FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_MES =    ISNULL ((SELECT SUM (REA_MES)    FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)
					   ,REA_MES_FP = ISNULL ((SELECT MAX (REA_MES_FP) FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_PER =    ISNULL ((SELECT SUM (REA_PER)    FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)
					   ,REA_PER_FP = ISNULL ((SELECT MAX (REA_PER_FP) FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
					   ,REA_ANT =    ISNULL ((SELECT SUM (REA_ANT)    FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)
					   ,REA_ANT_FP = ISNULL ((SELECT MAX (REA_ANT_FP) FROM @RET WHERE CODGRUPO IN ('14','15','16') AND INFORMATIVO != 'S'), 0)  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
				WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '17'

	END


	-- CALCULA 'ANALISE VERTICAL' (% DE PARTICIPACAO DE CADA LINHA SOBRE DETERMINADO VALOR)
	DECLARE @CEMPORCENTO FLOAT;

	-- ANTES DA RECEITA LIQUIDA, A REFERENCIA (QUEM VALE 100%) EH O TOTAL DAS RECEITAS
	SET @CEMPORCENTO = (SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '01')
	IF (@CEMPORCENTO != 0)
		UPDATE @RET SET ORC_ANO_AV = round (ORC_ANO * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO < '05'

	SET @CEMPORCENTO = (SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '01')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_PER_AV = round (ORC_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO < '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_MES) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '01')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_MES_AV = round (REA_MES * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO < '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '01')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_PER_AV = round (REA_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO < '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '01')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_ANT_AV = round (REA_ANT * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO < '05'

	-- DEPOIS DA RECEITA LIQUIDA, A REFERENCIA (QUEM VALE 100%) EH A RECEITA LIQUIDA
	SET @CEMPORCENTO = (SELECT SUM (ORC_ANO) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '05')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_ANO_AV = round (ORC_ANO * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO >= '05'

	SET @CEMPORCENTO = (SELECT SUM (ORC_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '05')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET ORC_PER_AV = round (ORC_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO >= '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_MES) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '05')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_MES_AV = round (REA_MES * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO >= '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_PER) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '05')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_PER_AV = round (REA_PER * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO >= '05'

	SET @CEMPORCENTO = (SELECT SUM (REA_ANT) FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '05')
	IF (@CEMPORCENTO > 0)
		UPDATE @RET SET REA_ANT_AV = round (REA_ANT * 100 / @CEMPORCENTO, 2)
		WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO >= '05'



	-- POSTERIORMENTE, NA TELA DE CONSULTA DO NAWEB, EXISTE A POSSIBILIDADE DE CLICAR EM UMA CONTA PARA
	-- DETALHAR SEUS LCTOS CONTABEIS. PARA FACILITAR A VISUALIZACAO, FOI SOLICITADO QUE APARECESSEM SOMENTE
	-- OS LCTOS DOS CC RELACIONADOS AO GRUPO QUE ESTIVER SENDO VERIFICADO, OU SEJA: AO CONSULTAR AS DESPESAS
	-- ADMINISTRATIVAS, MOSTRAR SOMENTE LCTOS AMARRADOS A CC ADMINISTRATIVOS.
	UPDATE @RET SET FILTRACC = '3' WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '10'  -- DESP.ADMINISTRATIVAS
	UPDATE @RET SET FILTRACC = '4' WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = '12'  -- DESP.COM VENDAS


/* ACHO QUE O OBJETO DO GX VAI FEZER ESTA SOMA SOZINHO
	-- CRIA LINHAS PARA ACUMULAR NIVEIS
	-- NO NIVEL 2 SOMA AS CONTAS INFORMATIVAS
	INSERT INTO @RET (CODPLA, CODGRUPO, GRUPO, SUBGRUPO, NIVEL,
					 ORC_ANO, ORC_ANO_FP, ORC_ANO_AV,
					 ORC_PER, ORC_PER_FP, ORC_PER_AV,
					 REA_MES, REA_MES_FP, REA_MES_AV,
					 REA_PER, REA_PER_FP, REA_PER_AV,
					 REA_ANT, REA_ANT_FP, REA_ANT_AV)
		SELECT DISTINCT @VISAO_PRINCIPAL, CODGRUPO, GRUPO, SUBGRUPO, 2,
						 SUM (ORC_ANO   ) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 MAX (ORC_ANO_FP) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TER UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (ORC_ANO_AV) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 SUM (ORC_PER   ) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 MAX (ORC_PER_FP) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TER UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (ORC_PER_AV) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 SUM (REA_MES   ) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 MAX (REA_MES_FP) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TER UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_MES_AV) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 SUM (REA_PER   ) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 MAX (REA_PER_FP) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TER UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_PER_AV) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 SUM (REA_ANT   ) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),
						 MAX (REA_ANT_FP) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TER UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						 SUM (REA_ANT_AV) OVER (PARTITION BY CODGRUPO, GRUPO, SUBGRUPO)
		FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND NIVEL = 3
		AND NIVEL != 1  -- AS LINHAS DE TOTAIS SAO UNICAS E NAO HA NECESSIDADE DE CALCULAR NIVEIS PARA ELAS.

	-- NO NIVEL 1 NAO DEVE SOMAR AS CONTAS INFORMATIVAS
	INSERT INTO @RET (CODPLA, CODGRUPO, GRUPO, NIVEL,
					 ORC_ANO, ORC_ANO_FP, ORC_ANO_AV,
					 ORC_PER, ORC_PER_FP, ORC_PER_AV,
					 REA_MES, REA_MES_FP, REA_MES_AV,
					 REA_PER, REA_PER_FP, REA_PER_AV,
					 REA_ANT, REA_ANT_FP, REA_ANT_AV)
		SELECT DISTINCT @VISAO_PRINCIPAL, CODGRUPO, GRUPO, 1,
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_ANO    END) OVER (PARTITION BY CODGRUPO, GRUPO),
						MAX (ORC_ANO_FP) OVER (PARTITION BY CODGRUPO, GRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_ANO_AV END) OVER (PARTITION BY CODGRUPO, GRUPO),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_PER    END) OVER (PARTITION BY CODGRUPO, GRUPO),
						MAX (ORC_PER_FP) OVER (PARTITION BY CODGRUPO, GRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE ORC_PER_AV END) OVER (PARTITION BY CODGRUPO, GRUPO),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_MES    END) OVER (PARTITION BY CODGRUPO, GRUPO),
						MAX (REA_MES_FP) OVER (PARTITION BY CODGRUPO, GRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_MES_AV END) OVER (PARTITION BY CODGRUPO, GRUPO),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_PER    END) OVER (PARTITION BY CODGRUPO, GRUPO),
						MAX (REA_PER_FP) OVER (PARTITION BY CODGRUPO, GRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_PER_AV END) OVER (PARTITION BY CODGRUPO, GRUPO),
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_ANT    END) OVER (PARTITION BY CODGRUPO, GRUPO),
						MAX (REA_ANT_FP) OVER (PARTITION BY CODGRUPO, GRUPO),  -- CONSEGUI USAR 'MAX' AQUI POR QUE SEMPRE TEM [FP], E P EH MAIOR QUE F, E BASTA TEM UM P EM QQUER LINHA PARA QUE ASSUMA P NO NIVEL ACIMA.
						SUM (CASE WHEN INFORMATIVO = 'S' THEN 0 ELSE REA_ANT_AV END) OVER (PARTITION BY CODGRUPO, GRUPO)
		FROM @RET WHERE CODPLA = @VISAO_PRINCIPAL AND NIVEL = 3
		AND NIVEL != 1  -- AS LINHAS DE TOTAIS SAO UNICAS E NAO HA NECESSIDADE DE CALCULAR NIVEIS PARA ELAS.
*/

	-- NAO QUEREMOS MAIS VISUALIZAR ESSE GRUPO, MAS ELE FOI MANTIDO ATEH ESTE PONTO POR QUE PARTICIPOU DE CALCULOS.
--	DELETE @RET WHERE CODPLA = @VISAO_PRINCIPAL AND CODGRUPO = 3

	-- ELIMINA LINHAS QUE FORAM USADAS PARA CALCULAR OUTROS TOTAIS, MAS QUE NAO DEVEM APARECER NA SAIDA FINAL.
--	DELETE @RET WHERE CONTA = ''

	-- ALIMENTA CAMPO 'ORDEM' QUE EH ESPERADO PELA CONSULTA DO NAWEB
	UPDATE @RET SET ORDEM = CAST (ISNULL (CODGRUPO, '99') AS FLOAT)
RETURN
END
GO
