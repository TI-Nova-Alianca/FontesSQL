use SIRH

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Descricao: Verifica se determinada pessoa deve ter seu acesso liberado neste momento. Retorna tambem dados de horarios para conferencia.
-- Autor....: Robert Koch
-- Data.....: 19/10/2020
--
-- Historico de alteracoes:
--

ALTER FUNCTION [dbo].[VA_FVERIFICAHORARIO2]
-- PARAMETROS DE CHAMADA
(
	@PESSOA AS INT
	,@DIASOLICITADO AS DATE
)

-- RETORNA TABELA TEMPORARIA
returns @RET TABLE (
	 DIADASEMANA INT
	,DIA        DATETIME
	,INI_00H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_01H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_02H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_03H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_04H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_05H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_06H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_07H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_08H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_09H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_10H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_11H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_12H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_13H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_14H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_15H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_16H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_17H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_18H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_19H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_20H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_21H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_22H VARCHAR (1) DEFAULT '' NOT NULL
	,INI_23H VARCHAR (1) DEFAULT '' NOT NULL
	)

AS
BEGIN
	DECLARE @CONTINUA BIT = 1;

	DECLARE @CONTRATO INT = 0
	DECLARE @ESCALACONTRATO     VARCHAR (4) = ''
	DECLARE @ESCALAPROGRAMADA   VARCHAR (4) = ''
	DECLARE @ESCALAACONSIDERAR  VARCHAR (4) = ''
	DECLARE @CODHORARIODIASEMANA   VARCHAR (4) = ''
	DECLARE @CODHORARIOPROGRAMADO  VARCHAR (4) = ''
	DECLARE @CODHORARIOACONSIDERAR VARCHAR (4) = ''
	DECLARE @DESCRICAOHORARIO   VARCHAR (40) = ''
	DECLARE @HORAINI VARCHAR (5) = ''
	DECLARE @HORAFIM VARCHAR (5) = ''
	DECLARE @PRIMEIRAMARCACAOESPERADA VARCHAR (5) = ''
	DECLARE @ULTIMAMARCACAOESPERADA VARCHAR (5) = ''
	DECLARE @ACAO VARCHAR (1) = ''
	DECLARE @OBS VARCHAR (100) = ''
	DECLARE @OP05 VARCHAR (1) = ''
	DECLARE @EM_FERIAS VARCHAR (1) = ''
	DECLARE @SITUACAOFOLHA VARCHAR (1) = ''
	DECLARE @DIADASEMANA INT = 0
	DECLARE @MINUTOSTOLERANCIAANTES INT = 20;
	DECLARE @MINUTOSTOLERANCIADEPOIS INT = 20;
	DECLARE @INICIOLIBERACAO DATETIME;
	DECLARE @FIMLIBERACAO DATETIME;
	DECLARE @DTHRAUX DATETIME;
	DECLARE @DTHRSOLICITADA_INI DATETIME;
	DECLARE @DTHRSOLICITADA_FIM DATETIME;

	-- INICIALIZA TABELA A SER RETORNADA COM OS 7 DIAS DA SEMANA ATUAL.
	-- ORIGINAL --> DECLARE @DOMINGO DATE = dateadd(day, 1-datepart(dw, getdate()), CONVERT(date,getdate()))  -- https://stackoverflow.com/questions/23051197/how-to-get-data-of-current-week-only-in-sql-server/32226598
	DECLARE @DOMINGO DATE = dateadd(day, 1-datepart(dw, @DIASOLICITADO), CONVERT(date, @DIASOLICITADO))
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (1, @DOMINGO);
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (2, DATEADD (DAY, 1, @DOMINGO));
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (3, DATEADD (DAY, 2, @DOMINGO));
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (4, DATEADD (DAY, 3, @DOMINGO));
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (5, DATEADD (DAY, 4, @DOMINGO));
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (6, DATEADD (DAY, 5, @DOMINGO));
	INSERT INTO @RET (DIADASEMANA, DIA) VALUES (7, DATEADD (DAY, 6, @DOMINGO));


	-- BUSCA DADOS PRINCIPAIS DA PESSOA
	SELECT TOP 1 @OP05           = ISNULL (OP05, 1)  -- TRATA NULL COMO SE FOSSE 1.
				,@EM_FERIAS      = ISNULL (EM_FERIAS, '')
				,@CONTRATO       = ISNULL (CONTRATO, '')
				,@ESCALACONTRATO = ISNULL (ESCALA_CONTRATO, '')
				,@SITUACAOFOLHA  = ISNULL (SITUACAO, '')
	FROM VA_VFUNCIONARIOS
	WHERE PESSOA = @PESSOA


	-- VERIFICA A SITUACAO DO CAMPO 'OPC05', QUE EH ONDE O PESSOAL DO RH PODE INFORMAR COMO O FUNCIONARIO DEVE SER TRATADO
	IF (@OP05 = 3)  --Pessoa marcada como SEMPRE LIBERAR
	BEGIN
		UPDATE @RET SET INI_00H = 'L'
		               ,INI_01H = 'L'
		               ,INI_02H = 'L'
		               ,INI_03H = 'L'
		               ,INI_04H = 'L'
		               ,INI_05H = 'L'
		               ,INI_06H = 'L'
		               ,INI_07H = 'L'
		               ,INI_08H = 'L'
		               ,INI_09H = 'L'
		               ,INI_10H = 'L'
		               ,INI_11H = 'L'
		               ,INI_12H = 'L'
		               ,INI_13H = 'L'
		               ,INI_14H = 'L'
		               ,INI_15H = 'L'
		               ,INI_16H = 'L'
		               ,INI_17H = 'L'
		               ,INI_18H = 'L'
		               ,INI_19H = 'L'
		               ,INI_20H = 'L'
		               ,INI_21H = 'L'
		               ,INI_22H = 'L'
		               ,INI_23H = 'L'
		SET @CONTINUA = 0;
	END
	
	IF (@CONTINUA = 1)
	BEGIN
		IF (@EM_FERIAS = 'S' OR @SITUACAOFOLHA IN ('2', '3','4'))  -- PESSOA AFASTADA OU DEMITIDA
		BEGIN
			-- NAO PRECISO FAZER NADA, POIS A TABELA DE RETORNO EH INICIALIZADA VAZIA.
			SET @CONTINUA = 0;
		END
	END

	IF (@CONTINUA = 1)
	BEGIN
		-- PRECISO VERIFICAR EM TODOS OS DIAS DA SEMANA A SER RETORNADA
		-- PRECISARIA DE UM CURSOR AQUI

		-- confirmar, ainda, se eh aqui que preciso verificar se tem ocorrencias como atestado.

		-- VERIFICA SE TEM PROGRAMACAO DE HORA EXTRA
		UPDATE @RET SET INI_17H = 'E'
		WHERE EXISTS (SELECT * FROM RHAUTHORASEXTRAS HE WHERE CONTRATO = @CONTRATO
						AND HE.DATAINICIO = DIA
						AND HE.DATATERMINO >= DIA
						AND SUBSTRING (HE.HORADE, 1, 2) <= '17'
						AND SUBSTRING (HE.HORAATE, 1, 2) >= '17')

		UPDATE @RET SET INI_18H = 'E'
		WHERE EXISTS (SELECT * FROM RHAUTHORASEXTRAS HE WHERE CONTRATO = @CONTRATO
						AND HE.DATAINICIO = DIA
						AND HE.DATATERMINO >= DIA
						AND SUBSTRING (HE.HORADE, 1, 2) <= '18'
						AND SUBSTRING (HE.HORAATE, 1, 2) >= '18')

		UPDATE @RET SET INI_19H = 'E'
		WHERE EXISTS (SELECT * FROM RHAUTHORASEXTRAS HE WHERE CONTRATO = @CONTRATO
						AND HE.DATAINICIO = DIA
						AND HE.DATATERMINO >= DIA
						AND SUBSTRING (HE.HORADE, 1, 2) <= '19'
						AND SUBSTRING (HE.HORAATE, 1, 2) >= '19')

		UPDATE @RET SET INI_20H = 'E'
		WHERE EXISTS (SELECT * FROM RHAUTHORASEXTRAS HE WHERE CONTRATO = @CONTRATO
						AND HE.DATAINICIO = DIA
						AND HE.DATATERMINO >= DIA
						AND SUBSTRING (HE.HORADE, 1, 2) <= '20'
						AND SUBSTRING (HE.HORAATE, 1, 2) >= '20')

		UPDATE @RET SET INI_21H = 'E'
		WHERE EXISTS (SELECT * FROM RHAUTHORASEXTRAS HE WHERE CONTRATO = @CONTRATO
						AND HE.DATAINICIO = DIA
						AND HE.DATATERMINO >= DIA
						AND SUBSTRING (HE.HORADE, 1, 2) <= '21'
						AND SUBSTRING (HE.HORAATE, 1, 2) >= '21')
						--AND CAST (FORMAT (HE.DATATERMINO, 'yyyy-MM-dd') + ' ' + HE.HORAATE AS DATETIME) >= DIA)
	END

	--SELECT TOP 100 * FROM RHAUTHORASEXTRAS WHERE CONTRATO = 2193 -- CLAUDIA
	--SELECT TOP 100 * FROM RHAUTHORASEXTRAS WHERE DATAINICIO != DATATERMINO
	--SELECT TOP 100 * FROM RHAUTHORASEXTRAS WHERE HORADE > HORAATE
/*
	-- SE AINDA NAO TEM DEFINICAO (BLOQUEADO,HORA EXTRA, ETC.) ENTAO VERIFICA SE TEM PROGRAMACAO DE HORARIO.
	IF (@ACAO = '')
	BEGIN
		SET @CODHORARIOPROGRAMADO = ISNULL ((SELECT HORARIO
											FROM RHPROGRAMACAOHORARIO
											WHERE CONTRATO = @CONTRATO
											AND FORMAT (DATAHORARIO, 'yyyy-MM-dd') = FORMAT (@DTHRSOLICITADA, 'yyyy-MM-dd'))
										, '')

		-- SE NAO TEM PROGRAMACAO DE HORARIO PARA ESTE DIA, PODE TER PROGRAMACAO DE ESCALA.
		IF (@CODHORARIOPROGRAMADO = '')
		BEGIN
			SET @ESCALAPROGRAMADA = ISNULL ((SELECT ESCALA
												FROM RHPROGRAMACAOESCALAS
												WHERE CONTRATO = @CONTRATO
												AND FORMAT (DATAINICIO, 'yyyy-MM-dd') <= FORMAT (@DTHRSOLICITADA, 'yyyy-MM-dd')
												AND FORMAT (DATATERMINO, 'yyyy-MM-dd') >= FORMAT (@DTHRSOLICITADA, 'yyyy-MM-dd'))
											, '')

			-- DEFINE A ESCALA A SER CONSIDERADA
			IF (@ESCALAPROGRAMADA = '')
			BEGIN
				SET @ESCALAACONSIDERAR = @ESCALACONTRATO
			END
			ELSE
			BEGIN
				SET @ESCALAACONSIDERAR = @ESCALAPROGRAMADA
				SET @OBS = 'Programacao escala ' + @ESCALAPROGRAMADA + ' para este dia.'
			END

			-- O METADADOS CONSIDERA SEGUNDA=1, TERCA=2, ..., DOMINGO=7
			SET @DIADASEMANA = DATEPART (WEEKDAY, @DTHRSOLICITADA) - 1
			IF (@DIADASEMANA = 0)
			BEGIN
				SET @DIADASEMANA = 7
			END

			 -- BUSCA CODIGO DO HORARIO A SER FEITO NESTE DIA DA SEMANA, DE ACORDO COM A ESCALA A SER CONSIDERADA.
			SET @CODHORARIODIASEMANA = (SELECT HORARIO FROM RHESCALASSEMANAIS WHERE ESCALA = @ESCALAACONSIDERAR AND DIASEMANA = @DIADASEMANA)
			SET @CODHORARIOACONSIDERAR = @CODHORARIODIASEMANA

		END
		ELSE
		BEGIN
			SET @OBS += 'Programacao horario ' + @CODHORARIOPROGRAMADO + ' para este dia.'
			SET @CODHORARIOACONSIDERAR = @CODHORARIOPROGRAMADO
		END
	END		

	-- SE CHEGOU ATEH AQUI SEM DEFINICAO DE BLOQUEIO, PRECISA VERIFICAR HORARIOS DO CODIGO DE HORARIO A CONSIDERAR.
	IF (@ACAO = '' AND @CODHORARIOACONSIDERAR IS NULL)
	BEGIN
		SET @OBS += 'Sem definicao de horario para o ' + CAST (@DIADASEMANA AS VARCHAR (1)) + 'o. dia da semana.'
		SET @ACAO = 'B'
	END

	IF (@ACAO = '')
	BEGIN
		-- BUSCA HORARIOS DA PRIMEIRA E ULTIMA MARCACOES DE PONTO ESPERADAS PARA ESSE HORARIO.
		SET @PRIMEIRAMARCACAOESPERADA = ISNULL ((SELECT HORAMARCACAO FROM RHHORARIOSMARCACOES WHERE HORARIO = @CODHORARIOACONSIDERAR AND CLASSEMARCACAO = '01'), '00:00')
		SET @ULTIMAMARCACAOESPERADA = ISNULL ((SELECT HORAMARCACAO FROM RHHORARIOSMARCACOES WHERE HORARIO = @CODHORARIOACONSIDERAR AND CLASSEMARCACAO = '99'), '00:00')
--		print 'marcacoes esperadas: ' + cast (@PRIMEIRAMARCACAOESPERADA as varchar (max)) + ' e ' + cast (@ULTIMAMARCACAOESPERADA as varchar (max))

		-- APLICA TOLERANCIA AOS LIMITES DE HORARIO.
		-- TRANSFORMA EM DATETIME PARA PODER APLICAR FUNCOES DE CALCULOS COM DATAS DO SQL.
		SET @DTHRAUX = CAST (FORMAT (@DTHRSOLICITADA, 'yyyyMMdd') + ' ' + @PRIMEIRAMARCACAOESPERADA AS DATETIME)
		SET @INICIOLIBERACAO = DATEADD (MINUTE, @MINUTOSTOLERANCIAANTES * -1, @DTHRAUX)

		SET @DTHRAUX = CAST (FORMAT (@DTHRSOLICITADA, 'yyyyMMdd') + ' ' + @ULTIMAMARCACAOESPERADA AS DATETIME)
		SET @FIMLIBERACAO = DATEADD (MINUTE, @MINUTOSTOLERANCIADEPOIS, @DTHRAUX)

		-- SE DATA+HORA DE FIM MENOR QUE DATA+HORA DE INICIO, EH POR QUE TRATA-SE DE HORARIO NOTURNO (PASSA PELA MEIA NOITE)
		IF (@FIMLIBERACAO < @INICIOLIBERACAO)
		BEGIN
			--PRINT ('VIRA NOITE')
			IF (DATEPART (HOUR, @DTHRSOLICITADA) <= DATEPART (HOUR, @FIMLIBERACAO))
			BEGIN
				--PRINT 'MUDANDO INICIO LIBERACAO PARA ONTEM'
				SET @INICIOLIBERACAO = DATEADD (DAY, -1, @INICIOLIBERACAO)
			END
			ELSE
			BEGIN
				--PRINT 'MUDANDO FIM LIBERACAO PARA AMANHA'
				SET @FIMLIBERACAO = DATEADD (DAY, 1, @FIMLIBERACAO)
			END
		END
--		print 'inicio e fim liberacao: ' + cast (@INICIOLIBERACAO as varchar (max)) + ' e ' + cast (@FIMLIBERACAO as varchar (max))

		IF (@DTHRSOLICITADA >= @INICIOLIBERACAO AND @DTHRSOLICITADA <= @FIMLIBERACAO)
		BEGIN
			SET @OBS  = 'Dentro do horario normal'
			SET @ACAO = 'L'
		END
		ELSE
		BEGIN
			SET @OBS  = 'Fora do horario normal'
			SET @ACAO = 'B'
		END
	END

	INSERT INTO @RET (ACAO, OBSERVACAO, ESCALA, HORARIO, HORAINI, HORAFIM, INILIBERACAO, FIMLIBERACAO)
	VALUES (@ACAO, @OBS, @ESCALAACONSIDERAR, @CODHORARIOACONSIDERAR, @HORAINI, @HORAFIM, @INICIOLIBERACAO, @FIMLIBERACAO)
*/
RETURN
END
GO
